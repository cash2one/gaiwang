<?php

/**
 * Class AcronCommand
 * @author qinghao.ye@g-emall.com
 * 每月自动化导出流水文件
 */

class AcronCommand extends CConsoleCommand
{
    /**
     * 脚本入口
     * @param string $setMonth 设置导出月份,默认为前一月
     */
    public function actionDo($setMonth='')
    {
        $start = 1;
        $end = 1;
        $thread = 3;
        $total_num = '50000';
        $month = $setMonth >= 2015 ? (int)$setMonth : date('Ym')-1;
        $sql = "select max(ID) from account.v_flow_{$month}";
        $maxId = Yii::app()->conn_bi->createCommand($sql)->queryScalar();
        $total_page = ceil($maxId/$total_num);
        $count = ceil($total_page/$thread);

        $php_path = '/usr/local/webapps/php/bin/php ';
        $console_path = '/www/web/gaiwang/console/yiic.php ';

        for ($i = $thread; $i>0; $i--){
            $end = $start + $count - 1;
            //var_dump($month,$total_num,$start,$end);
            $cmd = str_replace(array('{1}','{2}','{3}','{4}'),array($month,$total_num,$start,$end),'acron saveFile --month={1} --file_total_row={2} --file_start={3} --file_end={4}');
            $res = exec($php_path.$console_path.$cmd.' > /dev/null &');
            echo $i.' - '.$res.PHP_EOL;
            $start = $end + 1;
        }
    }

    /**
     * @param $month 月份
     * @param $file_total_row 每个文件行数
     * @param $file_start 文件开始序号
     * @param $file_end 文件结束序号
     */
    public function actionSaveFile($month,$file_total_row,$file_start,$file_end){
        @ini_set('memory_limit', '7000M');
        @ini_set("max_execution_time", "0");

        //1-5  6-10  11-15
        $i = $file_start;
        $n = $file_end;

        echo "num: $n \n";
        $start_time = time();
        for ($i; $i <= $n; $i++) {
            if ($i > $n) break;
            $start = ($i - 1) * $file_total_row;
            //正常导出
            $sql = "select * from account.v_flow_{$month} order by ID asc limit {$start},{$file_total_row}";
            $data_arr = Yii::app()->conn_bi->createCommand($sql)->queryAll();
            if(empty($data_arr)) break;
            //文件标头

            $columns = array_keys($data_arr[0]);
            $csv_string = implode(',',$columns)."\n";

            foreach ($data_arr as $key => $row) {
                // 组装csv行
                $csv_string .= $this->formatRowToCSV($row);
                echo $i.'/'.$n."-ROW: $key \n";
            }
            unset($data_arr);
            $time = date('Ym', time());
            $this->saveFile('flow_' . $time . '_' . $i,$csv_string);

            echo $i . "-time:" . (time() - $start_time) . "\n";
            $csv_string = '';
        }
        echo "end-time:" . (time() - $start_time) . "\n";
    }

    /**
     * 格式结果数据
     * @param $row
     * @return string
     */
    public function formatRowToCSV($row){
        foreach($row as $key => $val){
            $row[$key] = str_replace(',','，',$val);
        }
        return implode(',',$row)."\n"; //用引文逗号分开
    }
    /**
     * 保存为csv格式文件
     * @param $filename
     * @param $data
     */
    public function saveFile($filename,$data){
        $save_dir = dirname(dirname(__FILE__)).DS.'data'.DS.date('Ymd');
        if(!is_dir($save_dir)) @mkdir($save_dir,0777);
        $fp = fopen($save_dir.DS.$filename.'.csv','w');
        if(!$fp){
            echo "不能打开文件 $filename";
            exit;
        }
        if (fwrite($fp, chr(0xEF).chr(0xBB).chr(0xBF).$data) === FALSE) {
            echo "不能写入到文件 $filename";
            exit;
        }
        fclose($fp);
    }

    private $cn = '';
    private $cp = '';
    public function beforeAction($action, $params)
    {
        $connectionString = base64_decode('bXlzcWw6aG9zdD0xNzIuMTguNy4yMzA7ZGJuYW1lPWdhaXdhbmc=');
        $connection = new CDbConnection($connectionString,base64_decode($this->cn),base64_decode($this->cp));
        $connection->active = true;
        Yii::app()->setComponent( 'conn_bi', $connection );

        return parent::beforeAction($action, $params); // TODO: Change the autogenerated stub
    }
}